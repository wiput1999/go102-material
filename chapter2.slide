go

14:03 30 Nov 2019
Tags: golang

Pallat Anchaleechamaikorn
golang developer
Technical Coach

yod.pallat@gmail.com
https://github.com/pallat
https://github.com/goyod
https://github.com/pyod



* Anonymous Function
.background ./images/whitebg.png
.play ./example/functions/anonymous.go

#############################################

* First-Class Function
.background ./images/whitebg.png
.play ./example/functions/firstclass.go

#############################################

* Higher-Order Function
.background ./images/whitebg.png

.play ./example/functions/higher_order.go

#############################################

* Higher-Order Function
.background ./images/whitebg.png

.play ./example/functions/higher_order2.go

#############################################

* func type
.background ./images/whitebg.png

    type area func(float64, float64) float64 

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/basic.go

#############################################

* defer
.background ./images/whitebg.png

defer is stack

.play ./example/defer/stack.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/func.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/anonymous.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/try_catch.go

#############################################

* Exercise
.background ./images/whitebg.png

    Make an API to generate JWT token

    Make a Wrapper for FizzBuzz handler to validate JWT
    
#############################################

* method
.background ./images/whitebg.png

    type rectangle struct {
        w,l float64
    }

    func (r rectangle) area() float64 {
        return r.w * r.l
    }

#############################################

* method with pointer receiver
.background ./images/whitebg.png

    type rectangle struct {
        w,l float64
    }

    func (r *rectangle) area() float64 {
        return r.w * r.l
    }

#############################################

* method on primitive type
.background ./images/whitebg.png

    type text string

    func (t text) split(sep string) []string{
        return strings.Split(string(t), sep)
    }

#############################################

* Exercise
.background ./images/whitebg.png

change FizzBuzz to OOP like

    fb := fizzbuzz.New(15)
    fb.String()

#############################################

* interface{}
.background ./images/whitebg.png

empty interface

    var i interface{}

    i = 10
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = "ten"
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = struct {
        number int
        text string
    } {
        number: 10,
        text: "ten",
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = func() string {
        return "10"
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

#############################################

* interface: type assertion
.background ./images/whitebg.png

.play ./example/interface/assertions.go

#############################################

* interface: type switch
.background ./images/whitebg.png

.play ./example/interface/switch_type.go

#############################################

* interface 
.background ./images/whitebg.png

To define a set of method signatures

    Interfaces specify behaviors. 
    An interface type defines a set 
    of methods:


    type areaer interface {
        area() int
    }


`Interfaces` are `implemented` `implicitly`

#############################################

* interface: Stringer

.background ./images/whitebg.png

    type Stringer interface {
        String() string
    }

#############################################

* interface: error

.background ./images/whitebg.png

    type error interface {
        Error() string
    }

#############################################

* Exercise

    add a new API random a number and return FizzBuzz then test it
    {
        "number": 30000,
        "message": "FizzBuzz"
    }

#############################################

* goroutine

.background ./images/whitebg.png
.play ./example/go/routine.go /^func main/,

#############################################

* goroutine
.background ./images/whitebg.png

.play ./example/go/wait.go /^func main/,

#############################################

* channel 
.background ./images/whitebg.png

keyword `chan`

    * no buffered channel
    * buffered channel

#############################################

* buffered channel
.background ./images/whitebg.png

.play ./example/channel/buffered.go /^func main/,

#############################################

* no buffered channel
.background ./images/whitebg.png

.play ./example/channel/signal.go /^func main/,

#############################################

* Exercise
    generate 10 random 16 bits and use 10 go-routine to encrypt it

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/functions/closure.go

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/functions/closure2.go /func main/,/} // END/

